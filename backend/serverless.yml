service: notarynearby
frameworkVersion: '3'

provider:
  name: aws
  runtime: go1.x
  stage: dev
  region: us-east-1
  httpApi:
    cors: true

  environment:
    PROJECT_NAME: ${self:service}
    STAGE: ${self:provider.stage}
    REGION: ${self:provider.region}
    SNS_SESSIONS_ARN:
      Fn::Join:
        - ':'
        - - 'arn:aws:sns'
          - Ref: 'AWS::Region'
          - Ref: 'AWS::AccountId'
          - notarynearby-${self:provider.stage}-wssessions
    S3_ORDERS: ${self:service}-${opt:stage, self:provider.stage}-orders
    S3_NOTARIES: ${self:service}-${opt:stage, self:provider.stage}-notaries
    NFT_STORAGE_API_KEY: ${env:NFT_STORAGE_API_KEY}
  iam:
    role:
      statements:
        - Effect: Allow
          Action:
            - dynamodb:*
          Resource:
            - arn:aws:dynamodb:*:*:table/${self:service}-${self:provider.stage}-*
        - Effect: Allow
          Action:
            - sns:*
          Resource:
            - arn:aws:sns:*:*:${self:service}-${self:provider.stage}-*
        - Effect: Allow
          Action:
            - s3:*
          Resource:
            - arn:aws:s3:::${self:service}-${opt:stage, self:provider.stage}-orders
            - arn:aws:s3:::${self:service}-${opt:stage, self:provider.stage}-orders/*
            - arn:aws:s3:::${self:service}-${opt:stage, self:provider.stage}-notaries
            - arn:aws:s3:::${self:service}-${opt:stage, self:provider.stage}-notaries/*

layers:
  node:
    path: ./layers/node
    name: ${self:service}-${opt:stage, self:provider.stage}-node
    description: Node runtime
    package:
      include:
        - ./**
        - ./layers/node/**
  scripts:
    path: ./layers/scripts
    name: ${self:service}-${opt:stage, self:provider.stage}-scripts
    description: Scripts to run with node
    package:
      include:
        - ./**
        - ./layers/scripts/**

package:
  individually: true
  # patterns:
  #   - '!./**'
    # - '!./**'
    # - ./bin/**

functions:
  api:
    handler: bin/socket
    events:
      - websocket:
          route: $connect
      - websocket:
          route: $disconnect
    package:
      individually: true
      patterns:
        - '!./**'
        - ./bin/socket

  loopback:
    handler: bin/loopback
    timeout: 900
    memorySize: 2048
    events:
      - sns: 
          arn: !Ref WSSessionsTopic
          topicName: ${self:service}-${opt:stage, self:provider.stage}-wssessions
    package:
      individually: true
      patterns:
        - '!./**'
        - ./bin/loopback

  participantsCreate:
    handler: bin/participants/create
    events:
      - httpApi:
          path: /participants
          method: post
    package:
      individually: true
      patterns:
        - '!./**'
        - ./bin/participants/create

  participantsGetOne:
    handler: bin/participants/getOne
    events:
      - httpApi:
          path: /participants/{participant}
          method: get
    package:
      individually: true
      patterns:
        - '!./**'
        - ./bin/participants/getOne

  notariesCreate:
    handler: bin/notaries/create
    events:
      - httpApi:
          path: /notaries
          method: post
    package:
      individually: true
      patterns:
        - '!./**'
        - ./bin/notaries/create

  notariesGetOne:
    handler: bin/notaries/getOne
    events:
      - httpApi:
          path: /notaries/{notary}
          method: get
    package:
      individually: true
      patterns:
        - '!./**'
        - ./bin/notaries/getOne

  ordersCreate:
    handler: bin/orders/create
    events:
      - httpApi:
          path: /orders
          method: post
    package:
      individually: true
      patterns:
        - '!./**'
        - ./bin/orders/create

  ordersGetAll:
    handler: bin/orders/getAll
    events:
      - httpApi:
          path: /orders
          method: get
    package:
      individually: true
      patterns:
        - '!./**'
        - ./bin/orders/getAll

  ordersGetOne:
    handler: bin/orders/getOne
    events:
      - httpApi:
          path: /orders/{order_id}
          method: get
    package:
      individually: true
      patterns:
        - '!./**'
        - ./bin/orders/getOne

  ordersGetByOwner:
    handler: bin/orders/getByOwner
    events:
      - httpApi:
          path: /orders-by-owner/{owner}
          method: get
    package:
      individually: true
      patterns:
        - '!./**'
        - ./bin/orders/getByOwner

  # ordersOnChange:
  #   handler: bin/orders/onChange

  ordersSignDocument:
    handler: bin/orders/signDocument
    timeout: 900
    memorySize: 2048
    events:
      - s3:
          bucket: ${self:service}-${opt:stage, self:provider.stage}-orders
          event: s3:ObjectCreated:*
          rules:
            - suffix: out.pdf
          existing: true
          forceDeploy: true
    layers:
      - { Ref: NodeLambdaLayer }
      - { Ref: ScriptsLambdaLayer }
    package:
      individually: true
      patterns:
        - '!./**'
        - ./bin/orders/signDocument

resources:
  - ${file(configs/sls/notaries.yml)}
  - ${file(configs/sls/participants.yml)}
  - ${file(configs/sls/orders.yml)}
  - ${file(configs/sls/sessions.yml)}
