service: notarynearby
frameworkVersion: '3'

provider:
  name: aws
  runtime: go1.x
  stage: dev
  region: us-east-1
  httpApi:
    cors: true

  environment:
    PROJECT_NAME: ${self:service}
    STAGE: ${self:provider.stage}
    REGION: ${self:provider.region}
    SNS_SESSIONS_ARN:
      Fn::Join:
        - ':'
        - - 'arn:aws:sns'
          - Ref: 'AWS::Region'
          - Ref: 'AWS::AccountId'
          - notarynearby-${self:provider.stage}-wssessions
    S3_ORDERS: ${self:service}-${opt:stage, self:provider.stage}-orders
  iam:
    role:
      statements:
        - Effect: Allow
          Action:
            - dynamodb:*
          Resource:
            - arn:aws:dynamodb:*:*:table/${self:service}-${self:provider.stage}-*
        - Effect: Allow
          Action:
            - sns:*
          Resource:
            - arn:aws:sns:*:*:${self:service}-${self:provider.stage}-*
        - Effect: Allow
          Action:
            - s3:*
          Resource:
            - arn:aws:s3:::${self:service}-${opt:stage, self:provider.stage}-orders
            - arn:aws:s3:::${self:service}-${opt:stage, self:provider.stage}-orders/*

# you can add statements to the Lambda function's IAM Role here
#  iam:
#    role:
#      statements:
#        - Effect: "Allow"
#          Action:
#            - "s3:ListBucket"
#          Resource: { "Fn::Join" : ["", ["arn:aws:s3:::", { "Ref" : "ServerlessDeploymentBucket" } ] ]  }
#        - Effect: "Allow"
#          Action:
#            - "s3:PutObject"
#          Resource:
#            Fn::Join:
#              - ""
#              - - "arn:aws:s3:::"
#                - "Ref" : "ServerlessDeploymentBucket"
#                - "/*"

package:
  patterns:
    - '!./**'
    - ./bin/**

functions:
  api:
    handler: bin/socket
    events:
      - websocket:
          route: $connect
      - websocket:
          route: $disconnect

  loopback:
    handler: bin/loopback
    events:
      - sns: 
          arn: !Ref WSSessionsTopic
          topicName: ${self:service}-${opt:stage, self:provider.stage}-wssessions

  participantsCreate:
    handler: bin/participants/create
    events:
      - httpApi:
          path: /participants
          method: post

  participantsGetOne:
    handler: bin/participants/getOne
    events:
      - httpApi:
          path: /participants/{participant}
          method: get

  notariesCreate:
    handler: bin/notaries/create
    events:
      - httpApi:
          path: /notaries
          method: post

  notariesGetOne:
    handler: bin/notaries/getOne
    events:
      - httpApi:
          path: /notaries/{notary}
          method: get

  ordersCreate:
    handler: bin/orders/create
    events:
      - httpApi:
          path: /orders
          method: post

  ordersGetAll:
    handler: bin/orders/getAll
    events:
      - httpApi:
          path: /orders
          method: get

  ordersGetOne:
    handler: bin/orders/getOne
    events:
      - httpApi:
          path: /orders/{order_id}
          method: get

  ordersGetByOwner:
    handler: bin/orders/getByOwner
    events:
      - httpApi:
          path: /orders-by-owner/{owner}
          method: get

  ordersOnChange:
    handler: bin/orders/onChange


#    The following are a few example events you can configure
#    NOTE: Please make sure to change your handler code to work with those events
#    Check the event documentation for details
# events:
#    events:
#      - http:
#          path: users/create
#          method: get
#      - websocket: $connect
#      - s3: ${env:BUCKET}
#      - schedule: rate(10 minutes)
#      - sns: greeter-topic
#      - stream: arn:aws:dynamodb:region:XXXXXX:table/foo/stream/1970-01-01T00:00:00.000
#      - alexaSkill: amzn1.ask.skill.xx-xx-xx-xx
#      - alexaSmartHome: amzn1.ask.skill.xx-xx-xx-xx
#      - iot:
#          sql: "SELECT * FROM 'some_topic'"
#      - cloudwatchEvent:
#          event:
#            source:
#              - "aws.ec2"
#            detail-type:
#              - "EC2 Instance State-change Notification"
#            detail:
#              state:
#                - pending
#      - cloudwatchLog: '/aws/lambda/hello'
#      - cognitoUserPool:
#          pool: MyUserPool
#          trigger: PreSignUp
#      - alb:
#          listenerArn: arn:aws:elasticloadbalancing:us-east-1:XXXXXX:listener/app/my-load-balancer/50dc6c495c0c9188/
#          priority: 1
#          conditions:
#            host: example.com
#            path: /hello

#    Define function environment variables here
#    environment:
#      variable2: value2

# you can add CloudFormation resource templates here
#resources:
#  Resources:
#    NewResource:
#      Type: AWS::S3::Bucket
#      Properties:
#        BucketName: my-new-bucket
#  Outputs:
#     NewOutput:
#       Description: "Description for the output"
#       Value: "Some output value"

resources:
  - ${file(configs/sls/wssessions.yml)}
